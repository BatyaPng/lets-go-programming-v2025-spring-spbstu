// Code generated by protoc-gen-cobra. DO NOT EDIT.

package contact_manager

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func ContactManagerServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ContactManagerService"),
		Short: "ContactManagerService service client",
		Long:  "Service for managing contacts",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_ContactManagerServiceCreateContactCommand(cfg),
		_ContactManagerServiceGetContactCommand(cfg),
		_ContactManagerServiceListContactsCommand(cfg),
		_ContactManagerServiceUpdateContactCommand(cfg),
		_ContactManagerServiceDeleteContactCommand(cfg),
	)
	return cmd
}

func _ContactManagerServiceCreateContactCommand(cfg *client.Config) *cobra.Command {
	req := &CreateContactRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateContact"),
		Short: "CreateContact RPC client",
		Long:  "Create a new contact",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService", "CreateContact"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewContactManagerServiceClient(cc)
				v := &CreateContactRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateContact(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Name, cfg.FlagNamer("Name"), "", "Name contact is associated with")
	cmd.PersistentFlags().StringVar(&req.Number, cfg.FlagNamer("Number"), "", "Phone number contact is associated with")

	return cmd
}

func _ContactManagerServiceGetContactCommand(cfg *client.Config) *cobra.Command {
	req := &GetContactRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetContact"),
		Short: "GetContact RPC client",
		Long:  "Get a contact by ID",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService", "GetContact"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewContactManagerServiceClient(cc)
				v := &GetContactRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetContact(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "Id of contact's record in DB")

	return cmd
}

func _ContactManagerServiceListContactsCommand(cfg *client.Config) *cobra.Command {
	req := &ListContactsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListContacts"),
		Short: "ListContacts RPC client",
		Long:  "List all contacts",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService", "ListContacts"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewContactManagerServiceClient(cc)
				v := &ListContactsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListContacts(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	return cmd
}

func _ContactManagerServiceUpdateContactCommand(cfg *client.Config) *cobra.Command {
	req := &UpdateContactRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("UpdateContact"),
		Short: "UpdateContact RPC client",
		Long:  "Update a contact",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService", "UpdateContact"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewContactManagerServiceClient(cc)
				v := &UpdateContactRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.UpdateContact(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "Id of contact's record in DB")
	cmd.PersistentFlags().StringVar(&req.Name, cfg.FlagNamer("Name"), "", "Name contact is associated with")
	cmd.PersistentFlags().StringVar(&req.Number, cfg.FlagNamer("Number"), "", "Phone number contact is associated with")

	return cmd
}

func _ContactManagerServiceDeleteContactCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteContactRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteContact"),
		Short: "DeleteContact RPC client",
		Long:  "Delete a contact",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "ContactManagerService", "DeleteContact"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewContactManagerServiceClient(cc)
				v := &DeleteContactRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteContact(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "Id of contact's record in DB")

	return cmd
}
