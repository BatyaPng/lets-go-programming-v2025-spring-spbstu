// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contact_manager/v1/contact_manager.proto

package contact_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContactManagerService_AddContact_FullMethodName     = "/contact_manager.v1.ContactManagerService/AddContact"
	ContactManagerService_GetContact_FullMethodName     = "/contact_manager.v1.ContactManagerService/GetContact"
	ContactManagerService_GetAllContacts_FullMethodName = "/contact_manager.v1.ContactManagerService/GetAllContacts"
	ContactManagerService_UpdateContact_FullMethodName  = "/contact_manager.v1.ContactManagerService/UpdateContact"
	ContactManagerService_DeleteContact_FullMethodName  = "/contact_manager.v1.ContactManagerService/DeleteContact"
)

// ContactManagerServiceClient is the client API for ContactManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing contacts
type ContactManagerServiceClient interface {
	// Add a new contact
	AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error)
	// Get a contact by ID
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	// Get all contacts
	GetAllContacts(ctx context.Context, in *GetAllContactsRequest, opts ...grpc.CallOption) (*GetAllContactsResponse, error)
	// Update a contact
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error)
	// Delete a contact
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error)
}

type contactManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactManagerServiceClient(cc grpc.ClientConnInterface) ContactManagerServiceClient {
	return &contactManagerServiceClient{cc}
}

func (c *contactManagerServiceClient) AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddContactResponse)
	err := c.cc.Invoke(ctx, ContactManagerService_AddContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerServiceClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, ContactManagerService_GetContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerServiceClient) GetAllContacts(ctx context.Context, in *GetAllContactsRequest, opts ...grpc.CallOption) (*GetAllContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllContactsResponse)
	err := c.cc.Invoke(ctx, ContactManagerService_GetAllContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerServiceClient) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateContactResponse)
	err := c.cc.Invoke(ctx, ContactManagerService_UpdateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerServiceClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteContactResponse)
	err := c.cc.Invoke(ctx, ContactManagerService_DeleteContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactManagerServiceServer is the server API for ContactManagerService service.
// All implementations should embed UnimplementedContactManagerServiceServer
// for forward compatibility.
//
// Service for managing contacts
type ContactManagerServiceServer interface {
	// Add a new contact
	AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error)
	// Get a contact by ID
	GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error)
	// Get all contacts
	GetAllContacts(context.Context, *GetAllContactsRequest) (*GetAllContactsResponse, error)
	// Update a contact
	UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error)
	// Delete a contact
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error)
}

// UnimplementedContactManagerServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContactManagerServiceServer struct{}

func (UnimplementedContactManagerServiceServer) AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedContactManagerServiceServer) GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedContactManagerServiceServer) GetAllContacts(context.Context, *GetAllContactsRequest) (*GetAllContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllContacts not implemented")
}
func (UnimplementedContactManagerServiceServer) UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedContactManagerServiceServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactManagerServiceServer) testEmbeddedByValue() {}

// UnsafeContactManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactManagerServiceServer will
// result in compilation errors.
type UnsafeContactManagerServiceServer interface {
	mustEmbedUnimplementedContactManagerServiceServer()
}

func RegisterContactManagerServiceServer(s grpc.ServiceRegistrar, srv ContactManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedContactManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContactManagerService_ServiceDesc, srv)
}

func _ContactManagerService_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServiceServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManagerService_AddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServiceServer).AddContact(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManagerService_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManagerService_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServiceServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManagerService_GetAllContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServiceServer).GetAllContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManagerService_GetAllContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServiceServer).GetAllContacts(ctx, req.(*GetAllContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManagerService_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManagerService_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServiceServer).UpdateContact(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManagerService_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServiceServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactManagerService_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServiceServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactManagerService_ServiceDesc is the grpc.ServiceDesc for ContactManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contact_manager.v1.ContactManagerService",
	HandlerType: (*ContactManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContact",
			Handler:    _ContactManagerService_AddContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _ContactManagerService_GetContact_Handler,
		},
		{
			MethodName: "GetAllContacts",
			Handler:    _ContactManagerService_GetAllContacts_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _ContactManagerService_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ContactManagerService_DeleteContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contact_manager/v1/contact_manager.proto",
}
